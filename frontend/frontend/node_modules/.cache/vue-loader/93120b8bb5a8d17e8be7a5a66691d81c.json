{"remainingRequest":"C:\\Users\\Alberto\\Desktop\\roadToDatascience\\frontend\\frontend\\node_modules\\vue-loader\\lib\\loaders\\templateLoader.js??vue-loader-options!C:\\Users\\Alberto\\Desktop\\roadToDatascience\\frontend\\frontend\\node_modules\\cache-loader\\dist\\cjs.js??ref--0-0!C:\\Users\\Alberto\\Desktop\\roadToDatascience\\frontend\\frontend\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!C:\\Users\\Alberto\\Desktop\\roadToDatascience\\frontend\\frontend\\src\\components\\homepage\\Topics.vue?vue&type=template&id=4c566625&scoped=true&","dependencies":[{"path":"C:\\Users\\Alberto\\Desktop\\roadToDatascience\\frontend\\frontend\\src\\components\\homepage\\Topics.vue","mtime":1632296846828},{"path":"C:\\Users\\Alberto\\Desktop\\roadToDatascience\\frontend\\frontend\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"C:\\Users\\Alberto\\Desktop\\roadToDatascience\\frontend\\frontend\\node_modules\\vue-loader\\lib\\loaders\\templateLoader.js","mtime":499162500000},{"path":"C:\\Users\\Alberto\\Desktop\\roadToDatascience\\frontend\\frontend\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"C:\\Users\\Alberto\\Desktop\\roadToDatascience\\frontend\\frontend\\node_modules\\vue-loader\\lib\\index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:dmFyIHJlbmRlciA9IGZ1bmN0aW9uKCkgewogIHZhciBfdm0gPSB0aGlzCiAgdmFyIF9oID0gX3ZtLiRjcmVhdGVFbGVtZW50CiAgdmFyIF9jID0gX3ZtLl9zZWxmLl9jIHx8IF9oCiAgcmV0dXJuIF9jKCJkaXYiLCB7IHN0YXRpY0NsYXNzOiAiY29udGFpbmVyIiB9LCBbCiAgICBfdm0uX20oMCksCiAgICBfYygicCIsIHsgYXR0cnM6IHsgaWQ6ICJpbnRyb2R1Y3Rpb24tdGV4dCIgfSB9LCBbCiAgICAgIF92bS5fdigKICAgICAgICAiIEFzIHlvdSBtYXkga25vdyBkYXRhIHNjaWVuY2UgaXMgb25lIG9mIG1vc3QgdHJlbmRpbmcgdG9waWNzIG9uIHRoZSBpbnRlcm5ldC4gVGhlIHByb2Zlc3Npb24gb2YgdGhlIGRhdGEgc2NpZW50aXN0IGluZmFjdCBpcyBvbmUgb2YgdGhlIG1vc3QgcmVxdWVzdGVkIG9uIHRoZSBqb2IgbWFya2V0LiBJZiB5b3Ugd2FudCB0byBleHBsb3JlIHRoaXMgYW1hemluZyB3b3JsZCB0aGlzIGJsb2cgaXMgd2hhdCB5b3Ugd2VyZSBsb29raW5nIGZvci4gSW4gUm9hZCB0byBEYXRhIFNjaWVuY2UgaSB3aWxsIHRhbGsgYWJvdXQgdGhlIG1haW4gc3RhZ2VzIG9mIGEgZGF0YSBzY2llbmNlIHByb2plY3QuIEluIHBhcnRpY3VsYXIgaSB3aWxsIGV4cGxvcmUgZm91ciB0b3BpY3MgdGhhdCBpIHJlYWxseSBsaWtlOiB3ZWIgc2NyYXBpbmcsIGRhdGEgcHJlcGFyYXRpb24gYW5kIGV4cGxvcmF0aW9uLCBtYWNoaW5lIGxlYXJuaW5nIGFuZCBkZWVwIGxlYXJuaW5nLiAiCiAgICAgICkKICAgIF0pLAogICAgX2MoImRpdiIsIHsgYXR0cnM6IHsgaWQ6ICJjYXJkc19sYW5kc2NhcGVfd3JhcC0yIiB9IH0sIFsKICAgICAgX2MoImRpdiIsIHsgc3RhdGljQ2xhc3M6ICJjb250YWluZXIiIH0sIFsKICAgICAgICBfYygiZGl2IiwgeyBzdGF0aWNDbGFzczogInJvdyIgfSwgWwogICAgICAgICAgX2MoCiAgICAgICAgICAgICJkaXYiLAogICAgICAgICAgICB7IHN0YXRpY0NsYXNzOiAiY29sLXhzLTYgY29sLXNtLTMgY29sLW1kLTMgY29sLWxnLTMiIH0sCiAgICAgICAgICAgIFsKICAgICAgICAgICAgICBfYygicm91dGVyLWxpbmsiLCB7IGF0dHJzOiB7IHRvOiAidG9waWMvV2ViIHNjcmFwaW5nIiB9IH0sIFsKICAgICAgICAgICAgICAgIF9jKCJkaXYiLCB7IHN0YXRpY0NsYXNzOiAiY2FyZC1mbHllciIgfSwgWwogICAgICAgICAgICAgICAgICBfYygiZGl2IiwgeyBzdGF0aWNDbGFzczogInRleHQtYm94IiB9LCBbCiAgICAgICAgICAgICAgICAgICAgX2MoImRpdiIsIHsgc3RhdGljQ2xhc3M6ICJpbWFnZS1ib3giIH0sIFsKICAgICAgICAgICAgICAgICAgICAgIF9jKCJpbWciLCB7CiAgICAgICAgICAgICAgICAgICAgICAgIGF0dHJzOiB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgc3JjOiByZXF1aXJlKCIuLi8uLi9hc3NldHMvd2ViIHNjcmFwaW5nLmpwZyIpLAogICAgICAgICAgICAgICAgICAgICAgICAgIGFsdDogIiIKICAgICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgICAgfSkKICAgICAgICAgICAgICAgICAgICBdKSwKICAgICAgICAgICAgICAgICAgICBfYygiZGl2IiwgeyBzdGF0aWNDbGFzczogInRleHQtY29udGFpbmVyIiB9LCBbCiAgICAgICAgICAgICAgICAgICAgICBfYygiaDYiLCBbX3ZtLl92KCJXZWIgU2NyYXBpbmciKV0pLAogICAgICAgICAgICAgICAgICAgICAgX2MoInAiLCBbCiAgICAgICAgICAgICAgICAgICAgICAgIF92bS5fdigKICAgICAgICAgICAgICAgICAgICAgICAgICAiV2ViIHNjcmFwaW5nIGlzIG9uZSBvZiB0aGUgbWFueSB3YXlzIHRoYXQgYSBkYXRhIHNjaWVudGlzdCBjYW4gdXNlIHRvIGFjY2VzcyBkYXRhIGZyb20gdGhlIGludGVybmV0LiBJZiB5b3Ugd2FudCB0byBsZWFybiBtb3JlIGFib3V0IGl0IGNsaWNrIGhlcmUuIgogICAgICAgICAgICAgICAgICAgICAgICApCiAgICAgICAgICAgICAgICAgICAgICBdKQogICAgICAgICAgICAgICAgICAgIF0pCiAgICAgICAgICAgICAgICAgIF0pCiAgICAgICAgICAgICAgICBdKQogICAgICAgICAgICAgIF0pCiAgICAgICAgICAgIF0sCiAgICAgICAgICAgIDEKICAgICAgICAgICksCiAgICAgICAgICBfYygKICAgICAgICAgICAgImRpdiIsCiAgICAgICAgICAgIHsgc3RhdGljQ2xhc3M6ICJjb2wteHMtMTIgY29sLXNtLTMgY29sLW1kLTMgY29sLWxnLTMiIH0sCiAgICAgICAgICAgIFsKICAgICAgICAgICAgICBfYygKICAgICAgICAgICAgICAgICJyb3V0ZXItbGluayIsCiAgICAgICAgICAgICAgICB7IGF0dHJzOiB7IHRvOiAidG9waWMvRXhwbG9yYXRvcnkgZGF0YSBhbmFseXNpcyIgfSB9LAogICAgICAgICAgICAgICAgWwogICAgICAgICAgICAgICAgICBfYygiZGl2IiwgeyBzdGF0aWNDbGFzczogImNhcmQtZmx5ZXIiIH0sIFsKICAgICAgICAgICAgICAgICAgICBfYygiZGl2IiwgeyBzdGF0aWNDbGFzczogInRleHQtYm94IiB9LCBbCiAgICAgICAgICAgICAgICAgICAgICBfYygiZGl2IiwgeyBzdGF0aWNDbGFzczogImltYWdlLWJveCIgfSwgWwogICAgICAgICAgICAgICAgICAgICAgICBfYygiaW1nIiwgewogICAgICAgICAgICAgICAgICAgICAgICAgIGF0dHJzOiB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICBzcmM6IHJlcXVpcmUoIi4uLy4uL2Fzc2V0cy9lZGEuanBnIiksCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBhbHQ6ICIiCiAgICAgICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgICAgICB9KQogICAgICAgICAgICAgICAgICAgICAgXSksCiAgICAgICAgICAgICAgICAgICAgICBfYygiZGl2IiwgeyBzdGF0aWNDbGFzczogInRleHQtY29udGFpbmVyIiB9LCBbCiAgICAgICAgICAgICAgICAgICAgICAgIF9jKCJoNiIsIFtfdm0uX3YoIkVEQSIpXSksCiAgICAgICAgICAgICAgICAgICAgICAgIF9jKCJwIiwgWwogICAgICAgICAgICAgICAgICAgICAgICAgIF92bS5fdigKICAgICAgICAgICAgICAgICAgICAgICAgICAgICJCZWZvcmUgcnVubmluZyBhbnkgTUwgYWxnb3JpdGhtIGRhdGEgZXhwbG9yYXRpb24gaXMgYSBmb25kYW1lbnRhbCB0YXNrIHRvIGRvLiBJbiB0aGlzIHdheSB3ZSBjYW4gaGF2ZSBhbiBpZGVhIG9mIGhvdyBvdXIgZGF0YSBiZWhhdmVzLiIKICAgICAgICAgICAgICAgICAgICAgICAgICApCiAgICAgICAgICAgICAgICAgICAgICAgIF0pCiAgICAgICAgICAgICAgICAgICAgICBdKQogICAgICAgICAgICAgICAgICAgIF0pCiAgICAgICAgICAgICAgICAgIF0pCiAgICAgICAgICAgICAgICBdCiAgICAgICAgICAgICAgKQogICAgICAgICAgICBdLAogICAgICAgICAgICAxCiAgICAgICAgICApLAogICAgICAgICAgX2MoCiAgICAgICAgICAgICJkaXYiLAogICAgICAgICAgICB7IHN0YXRpY0NsYXNzOiAiY29sLXhzLTEyIGNvbC1zbS0zIGNvbC1tZC0zIGNvbC1sZy0zIiB9LAogICAgICAgICAgICBbCiAgICAgICAgICAgICAgX2MoInJvdXRlci1saW5rIiwgeyBhdHRyczogeyB0bzogInRvcGljL01hY2hpbmUgbGVhcm5pbmciIH0gfSwgWwogICAgICAgICAgICAgICAgX2MoImRpdiIsIHsgc3RhdGljQ2xhc3M6ICJjYXJkLWZseWVyIiB9LCBbCiAgICAgICAgICAgICAgICAgIF9jKCJkaXYiLCB7IHN0YXRpY0NsYXNzOiAidGV4dC1ib3giIH0sIFsKICAgICAgICAgICAgICAgICAgICBfYygiZGl2IiwgeyBzdGF0aWNDbGFzczogImltYWdlLWJveCIgfSwgWwogICAgICAgICAgICAgICAgICAgICAgX2MoImltZyIsIHsKICAgICAgICAgICAgICAgICAgICAgICAgYXR0cnM6IHsKICAgICAgICAgICAgICAgICAgICAgICAgICBzcmM6IHJlcXVpcmUoIi4uLy4uL2Fzc2V0cy9tYWNoaW5lIGxlYXJuaW5nLnN2ZyIpLAogICAgICAgICAgICAgICAgICAgICAgICAgIGFsdDogIiIKICAgICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgICAgfSkKICAgICAgICAgICAgICAgICAgICBdKSwKICAgICAgICAgICAgICAgICAgICBfYygiZGl2IiwgeyBzdGF0aWNDbGFzczogInRleHQtY29udGFpbmVyIiB9LCBbCiAgICAgICAgICAgICAgICAgICAgICBfYygiaDYiLCBbX3ZtLl92KCJNYWNoaW5lIExlYXJuaW5nIildKSwKICAgICAgICAgICAgICAgICAgICAgIF9jKCJwIiwgWwogICAgICAgICAgICAgICAgICAgICAgICBfdm0uX3YoCiAgICAgICAgICAgICAgICAgICAgICAgICAgIk1hY2hpbmUgTGVhcm5pbmcgY29uc2lzdHMgaW4gdGhlIHN0dWR5IG9mIGEgc2VyaWVzIG9mIGFsZ29yaXRobXMgdGhhdCBjYW4gbGVhcm4gdGhyb3VnaHQgZXhwZXJpZW5jZS4gQ2xpY2sgaGVyZSBpZiB5b3Ugd2FudCB0byBsZWFybiBtb3JlLiIKICAgICAgICAgICAgICAgICAgICAgICAgKQogICAgICAgICAgICAgICAgICAgICAgXSkKICAgICAgICAgICAgICAgICAgICBdKQogICAgICAgICAgICAgICAgICBdKQogICAgICAgICAgICAgICAgXSkKICAgICAgICAgICAgICBdKQogICAgICAgICAgICBdLAogICAgICAgICAgICAxCiAgICAgICAgICApLAogICAgICAgICAgX2MoCiAgICAgICAgICAgICJkaXYiLAogICAgICAgICAgICB7IHN0YXRpY0NsYXNzOiAiY29sLXhzLTEyIGNvbC1zbS0zIGNvbC1tZC0zIGNvbC1sZy0zIiB9LAogICAgICAgICAgICBbCiAgICAgICAgICAgICAgX2MoInJvdXRlci1saW5rIiwgeyBhdHRyczogeyB0bzogInRvcGljL0RlZXAgbGVhcm5pbmciIH0gfSwgWwogICAgICAgICAgICAgICAgX2MoImRpdiIsIHsgc3RhdGljQ2xhc3M6ICJjYXJkLWZseWVyIiB9LCBbCiAgICAgICAgICAgICAgICAgIF9jKCJkaXYiLCB7IHN0YXRpY0NsYXNzOiAidGV4dC1ib3giIH0sIFsKICAgICAgICAgICAgICAgICAgICBfYygiZGl2IiwgeyBzdGF0aWNDbGFzczogImltYWdlLWJveCIgfSwgWwogICAgICAgICAgICAgICAgICAgICAgX2MoImltZyIsIHsKICAgICAgICAgICAgICAgICAgICAgICAgYXR0cnM6IHsKICAgICAgICAgICAgICAgICAgICAgICAgICBzcmM6IHJlcXVpcmUoIi4uLy4uL2Fzc2V0cy9kZWVwIGxlYXJuaW5nLnN2ZyIpLAogICAgICAgICAgICAgICAgICAgICAgICAgIGFsdDogIiIKICAgICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgICAgfSkKICAgICAgICAgICAgICAgICAgICBdKSwKICAgICAgICAgICAgICAgICAgICBfYygiZGl2IiwgeyBzdGF0aWNDbGFzczogInRleHQtY29udGFpbmVyIiB9LCBbCiAgICAgICAgICAgICAgICAgICAgICBfYygiaDYiLCBbX3ZtLl92KCJEZWVwIExlYXJuaW5nIildKSwKICAgICAgICAgICAgICAgICAgICAgIF9jKCJwIiwgWwogICAgICAgICAgICAgICAgICAgICAgICBfdm0uX3YoCiAgICAgICAgICAgICAgICAgICAgICAgICAgIkRlZXAgbGVhcm5pbmcgaXMgYSBzdWJzZXQgb2YgbWFjaGluZSBsZWFybmluZyB0aGF0IHVzZXMgYXJjaGl0ZWN0dXJlcyB3aXRoIG11bHRpcGxlIGxheWVycyB0byBleHRyYWN0IGluZm9ybWF0aW9ucyBmcm9tIHRoZSBkYXRhLiIKICAgICAgICAgICAgICAgICAgICAgICAgKQogICAgICAgICAgICAgICAgICAgICAgXSkKICAgICAgICAgICAgICAgICAgICBdKQogICAgICAgICAgICAgICAgICBdKQogICAgICAgICAgICAgICAgXSkKICAgICAgICAgICAgICBdKQogICAgICAgICAgICBdLAogICAgICAgICAgICAxCiAgICAgICAgICApCiAgICAgICAgXSkKICAgICAgXSkKICAgIF0pCiAgXSkKfQp2YXIgc3RhdGljUmVuZGVyRm5zID0gWwogIGZ1bmN0aW9uKCkgewogICAgdmFyIF92bSA9IHRoaXMKICAgIHZhciBfaCA9IF92bS4kY3JlYXRlRWxlbWVudAogICAgdmFyIF9jID0gX3ZtLl9zZWxmLl9jIHx8IF9oCiAgICByZXR1cm4gX2MoImRpdiIsIHsgc3RhdGljQ2xhc3M6ICJ0aXRsZSIgfSwgWwogICAgICBfYygiaDEiLCBbX3ZtLl92KCJBcmUgeW91IHJlYWR5IHRvIGxlYXJuIERhdGEgU2NpZW5jZT8iKV0pLAogICAgICBfYygiaHIiKQogICAgXSkKICB9Cl0KcmVuZGVyLl93aXRoU3RyaXBwZWQgPSB0cnVlCgpleHBvcnQgeyByZW5kZXIsIHN0YXRpY1JlbmRlckZucyB9"}]}