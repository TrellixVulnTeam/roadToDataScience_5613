{"remainingRequest":"C:\\Users\\Alberto\\Desktop\\roadToDatascience\\frontend\\frontend\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!C:\\Users\\Alberto\\Desktop\\roadToDatascience\\frontend\\frontend\\src\\components\\PostsByTag.vue?vue&type=script&lang=js&","dependencies":[{"path":"C:\\Users\\Alberto\\Desktop\\roadToDatascience\\frontend\\frontend\\src\\components\\PostsByTag.vue","mtime":1627317929187},{"path":"C:\\Users\\Alberto\\Desktop\\roadToDatascience\\frontend\\frontend\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"C:\\Users\\Alberto\\Desktop\\roadToDatascience\\frontend\\frontend\\node_modules\\babel-loader\\lib\\index.js","mtime":315532800000},{"path":"C:\\Users\\Alberto\\Desktop\\roadToDatascience\\frontend\\frontend\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"C:\\Users\\Alberto\\Desktop\\roadToDatascience\\frontend\\frontend\\node_modules\\vue-loader\\lib\\index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:Ly8KLy8KLy8KLy8KLy8KLy8KLy8KDQppbXBvcnQgZ3FsIGZyb20gJ2dyYXBocWwtdGFnJw0KaW1wb3J0IFBvc3RMaXN0IGZyb20gJ0AvY29tcG9uZW50cy9Qb3N0TGlzdCcNCmV4cG9ydCBkZWZhdWx0IHsNCiAgbmFtZTogJ1Bvc3RzQnlUYWcnLA0KICBjb21wb25lbnRzOiB7DQogICAgUG9zdExpc3QsDQogIH0sDQogIGRhdGEgKCkgew0KICAgIHJldHVybiB7DQogICAgICBwb3N0czogbnVsbCwNCiAgICB9DQogIH0sDQogIGFzeW5jIGNyZWF0ZWQgKCkgew0KICAgIGNvbnN0IHBvc3RzID0gYXdhaXQgdGhpcy4kYXBvbGxvLnF1ZXJ5KHsNCiAgICAgIHF1ZXJ5OiBncWxgcXVlcnkgKCR0YWc6IFN0cmluZyEpIHsNCiAgICAgICAgcG9zdHNCeVRhZyh0YWc6ICR0YWcpIHsNCiAgICAgICAgICB0aXRsZQ0KICAgICAgICAgIHN1YnRpdGxlDQogICAgICAgICAgcHVibGlzaERhdGUNCiAgICAgICAgICBwdWJsaXNoZWQNCiAgICAgICAgICBtZXRhRGVzY3JpcHRpb24NCiAgICAgICAgICBzbHVnDQogICAgICAgICAgYXV0aG9yIHsNCiAgICAgICAgICAgIHVzZXIgew0KICAgICAgICAgICAgICB1c2VybmFtZQ0KICAgICAgICAgICAgICBmaXJzdE5hbWUNCiAgICAgICAgICAgICAgbGFzdE5hbWUNCiAgICAgICAgICAgIH0NCiAgICAgICAgICB9DQogICAgICAgICAgdGFncyB7DQogICAgICAgICAgICBuYW1lDQogICAgICAgICAgfQ0KICAgICAgICB9DQogICAgICB9YCwNCiAgICAgIHZhcmlhYmxlczogew0KICAgICAgICB0YWc6IHRoaXMuJHJvdXRlLnBhcmFtcy50YWcsDQogICAgICB9LA0KICAgIH0pDQogICAgdGhpcy5wb3N0cyA9IHBvc3RzLmRhdGEucG9zdHNCeVRhZw0KICB9LA0KfQ0K"},{"version":3,"sources":["PostsByTag.vue"],"names":[],"mappings":";;;;;;;;AAQA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","file":"PostsByTag.vue","sourceRoot":"src/components","sourcesContent":["<template>\r\n  <div>\r\n    <h2>Posts in #{{ $route.params.tag }}</h2>\r\n    <PostList :posts=\"posts\" v-if=\"posts\" />\r\n  </div>\r\n</template>\r\n\r\n<script>\r\nimport gql from 'graphql-tag'\r\nimport PostList from '@/components/PostList'\r\nexport default {\r\n  name: 'PostsByTag',\r\n  components: {\r\n    PostList,\r\n  },\r\n  data () {\r\n    return {\r\n      posts: null,\r\n    }\r\n  },\r\n  async created () {\r\n    const posts = await this.$apollo.query({\r\n      query: gql`query ($tag: String!) {\r\n        postsByTag(tag: $tag) {\r\n          title\r\n          subtitle\r\n          publishDate\r\n          published\r\n          metaDescription\r\n          slug\r\n          author {\r\n            user {\r\n              username\r\n              firstName\r\n              lastName\r\n            }\r\n          }\r\n          tags {\r\n            name\r\n          }\r\n        }\r\n      }`,\r\n      variables: {\r\n        tag: this.$route.params.tag,\r\n      },\r\n    })\r\n    this.posts = posts.data.postsByTag\r\n  },\r\n}\r\n</script>"]}]}